openapi: 3.0.1
info:
  title: Kjkardum.CloudyBack.Api
  version: '1.0'
paths:
  /api/Authentication/Login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/Authentication/Logout:
    post:
      tags:
        - Authentication
      responses:
        '204':
          description: No Content
  /api/Authentication/authenticated:
    get:
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/resource/BaseResource:
    get:
      tags:
        - BaseResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
        - name: resourceType
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
  /api/resource/BaseResource/dockerEnvironment:
    get:
      tags:
        - BaseResource
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DockerEnvironment'
            application/json:
              schema:
                $ref: '#/components/schemas/DockerEnvironment'
            text/json:
              schema:
                $ref: '#/components/schemas/DockerEnvironment'
  /api/resource/BaseResource/grafana:
    get:
      tags:
        - BaseResource
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GrafanaConfigurationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GrafanaConfigurationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GrafanaConfigurationDto'
    post:
      tags:
        - BaseResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureGrafanaCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ConfigureGrafanaCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConfigureGrafanaCommand'
      responses:
        '200':
          description: OK
  /api/resource/BaseResource/publicAccess:
    get:
      tags:
        - BaseResource
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PublicAccessConfigurationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAccessConfigurationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PublicAccessConfigurationDto'
    post:
      tags:
        - BaseResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurePublicAccessCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ConfigurePublicAccessCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConfigurePublicAccessCommand'
      responses:
        '200':
          description: OK
  '/api/resource/BaseResource/{resourceId}/container':
    get:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ContainerDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ContainerDto'
  '/api/resource/BaseResource/{resourceId}/audit-log':
    get:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuditLogDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AuditLogDtoPaginatedResponse'
  '/api/resource/BaseResource/{resourceId}/prometheus':
    post:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
          text/json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
  '/api/resource/BaseResource/{resourceId}/loki':
    post:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryLokiQuery'
          text/json:
            schema:
              $ref: '#/components/schemas/QueryLokiQuery'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QueryLokiQuery'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
  '/api/resource/KafkaClusterResource/{serverId}':
    get:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
    delete:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  '/api/resource/KafkaClusterResource/{serverId}/topics':
    get:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KafkaTopicDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KafkaTopicDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KafkaTopicDto'
    post:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKafkaTopicCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateKafkaTopicCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateKafkaTopicCommand'
      responses:
        '200':
          description: OK
  '/api/resource/KafkaClusterResource/{serverId}/topics/{topicId}':
    post:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProduceKafkaTopicMessageCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ProduceKafkaTopicMessageCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProduceKafkaTopicMessageCommand'
      responses:
        '200':
          description: OK
  '/api/resource/KafkaClusterResource/{serverId}/topics/{topicId}/consumeLive':
    get:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
  /api/resource/KafkaClusterResource:
    post:
      tags:
        - KafkaClusterResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKafkaClusterCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateKafkaClusterCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateKafkaClusterCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/KafkaClusterResourceDto'
  '/api/resource/KafkaClusterResource/{serverId}/containerAction':
    post:
      tags:
        - KafkaClusterResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: actionId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/resource/PostgresServerResource:
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
    post:
      tags:
        - PostgresServerResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
  /api/resource/PostgresServerResource/database:
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDtoPaginatedResponse'
  '/api/resource/PostgresServerResource/{serverId}':
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
    delete:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  '/api/resource/PostgresServerResource/database/{databaseId}':
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
  '/api/resource/PostgresServerResource/database/{databaseId}/runQuery':
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunPostgresDatabaseQueryCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RunPostgresDatabaseQueryCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RunPostgresDatabaseQueryCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
  '/api/resource/PostgresServerResource/{databaseId}/databaseExtensions':
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresQueryResultDto'
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: extensionName
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/api/resource/PostgresServerResource/{serverId}/database':
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseSimpleResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseSimpleResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseSimpleResourceDto'
  '/api/resource/PostgresServerResource/{serverId}/containerAction':
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: actionId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/resource/ResourceGroup:
    post:
      tags:
        - ResourceGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDto'
    get:
      tags:
        - ResourceGroup
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupSimpleDtoPaginatedResponse'
  '/api/resource/ResourceGroup/{id}':
    get:
      tags:
        - ResourceGroup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
  '/api/resource/ResourceGroupedResource/{resourceId}':
    get:
      tags:
        - ResourceGroupedResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
  '/api/resource/ReverseProxy/connect/{resourceId}':
    post:
      tags:
        - ReverseProxy
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectReverseProxyCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectReverseProxyCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectReverseProxyCommand'
      responses:
        '200':
          description: OK
  '/api/resource/ReverseProxy/disconnect/{resourceId}':
    post:
      tags:
        - ReverseProxy
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisconnectReverseProxyCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/DisconnectReverseProxyCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DisconnectReverseProxyCommand'
      responses:
        '200':
          description: OK
  /api/resource/ReverseProxy/preCheckDns:
    get:
      tags:
        - ReverseProxy
      parameters:
        - name: url
          in: query
          schema:
            type: string
        - name: myAdminUrl
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DnsCheckDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DnsCheckDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DnsCheckDto'
  /health:
    get:
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/TenantManagement/createUser:
    post:
      tags:
        - TenantManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
      responses:
        '200':
          description: OK
  '/api/TenantManagement/updateUser/{id}':
    put:
      tags:
        - TenantManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
      responses:
        '200':
          description: OK
  '/api/TenantManagement/deleteUser/{id}':
    delete:
      tags:
        - TenantManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/resource/VirtualNetworkResource:
    get:
      tags:
        - VirtualNetworkResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDtoPaginatedResponse'
    post:
      tags:
        - VirtualNetworkResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualNetworkResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualNetworkResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateVirtualNetworkResourceCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkSimpleDto'
  '/api/resource/VirtualNetworkResource/{id}':
    get:
      tags:
        - VirtualNetworkResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VirtualNetworkResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkResourceDto'
  '/api/resource/VirtualNetworkResource/{id}/connect':
    post:
      tags:
        - VirtualNetworkResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectVirtualNetworkCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectVirtualNetworkCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectVirtualNetworkCommand'
      responses:
        '200':
          description: OK
  /api/resource/WebApplicationResource:
    get:
      tags:
        - WebApplicationResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDtoPaginatedResponse'
    post:
      tags:
        - WebApplicationResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebApplicationResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateWebApplicationResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateWebApplicationResourceCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
  '/api/resource/WebApplicationResource/{id}':
    get:
      tags:
        - WebApplicationResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WebApplicationResourceDto'
    delete:
      tags:
        - WebApplicationResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  '/api/resource/WebApplicationResource/{id}/deploymentConfiguration':
    put:
      tags:
        - WebApplicationResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebApplicationDeploymentConfigurationCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateWebApplicationDeploymentConfigurationCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateWebApplicationDeploymentConfigurationCommand'
      responses:
        '200':
          description: OK
  '/api/resource/WebApplicationResource/{id}/configuration':
    post:
      tags:
        - WebApplicationResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyWebApplicationConfigItemCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ModifyWebApplicationConfigItemCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ModifyWebApplicationConfigItemCommand'
      responses:
        '200':
          description: OK
  '/api/resource/WebApplicationResource/{id}/configuration/{configurationKey}':
    delete:
      tags:
        - WebApplicationResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: configurationKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/api/resource/WebApplicationResource/{serverId}/containerAction':
    post:
      tags:
        - WebApplicationResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: actionId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
components:
  schemas:
    AuditLogDto:
      required:
        - actionDisplayText
        - actionName
      type: object
      properties:
        id:
          type: string
          format: uuid
        actionName:
          type: string
        actionDisplayText:
          type: string
        actionMetadata:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        resourceId:
          type: string
          format: uuid
      additionalProperties: false
    AuditLogDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogDto'
      additionalProperties: false
    BaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
      additionalProperties: false
    BaseResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/BaseResourceDto'
      additionalProperties: false
    ConfigureGrafanaCommand:
      type: object
      properties:
        host:
          type: string
        useHttps:
          type: boolean
      additionalProperties: false
    ConfigurePublicAccessCommand:
      type: object
      properties:
        host:
          type: string
      additionalProperties: false
    ConnectReverseProxyCommand:
      type: object
      properties:
        urlForHost:
          type: string
        useHttps:
          type: boolean
      additionalProperties: false
    ConnectVirtualNetworkCommand:
      type: object
      properties:
        networkId:
          type: string
          format: uuid
        resourceId:
          type: string
          format: uuid
      additionalProperties: false
    ContainerDto:
      type: object
      properties:
        stateRunning:
          type: boolean
        statePaused:
          type: boolean
        stateRestarting:
          type: boolean
        stateError:
          type: string
        stateStartedAt:
          type: string
          format: date-time
        stateFinishedAt:
          type: string
          format: date-time
      additionalProperties: false
    CreateKafkaClusterCommand:
      required:
        - resourceGroupId
        - serverName
      type: object
      properties:
        resourceGroupId:
          type: string
          format: uuid
        serverName:
          type: string
        serverPort:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CreateKafkaTopicCommand:
      type: object
      properties:
        topicName:
          type: string
      additionalProperties: false
    CreatePostgresDatabaseCommand:
      required:
        - adminPassword
        - adminUsername
        - databaseName
      type: object
      properties:
        databaseName:
          type: string
        adminUsername:
          type: string
        adminPassword:
          type: string
      additionalProperties: false
    CreatePostgresServerCommand:
      required:
        - resourceGroupId
        - serverName
      type: object
      properties:
        resourceGroupId:
          type: string
          format: uuid
        serverName:
          type: string
        serverPort:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CreateResourceGroupCommand:
      required:
        - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    CreateVirtualNetworkResourceCommand:
      type: object
      properties:
        resourceGroupId:
          type: string
          format: uuid
        name:
          type: string
      additionalProperties: false
    CreateWebApplicationResourceCommand:
      type: object
      properties:
        webApplicationName:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        sourcePath:
          type: string
        sourceType:
          $ref: '#/components/schemas/WebApplicationSourceType'
      additionalProperties: false
    DisconnectReverseProxyCommand:
      type: object
      properties:
        connectionId:
          type: string
          format: uuid
      additionalProperties: false
    DnsCheckDto:
      type: object
      properties:
        hostname:
          type: string
        ipsBehindHostname:
          type: array
          items:
            type: string
        adminHostname:
          type: string
        ipsBehindAdminHostname:
          type: array
          items:
            type: string
      additionalProperties: false
    DockerContainer:
      type: object
      properties:
        containerId:
          type: string
        containerName:
          type: string
        stateRunning:
          type: boolean
        statePaused:
          type: boolean
        stateRestarting:
          type: boolean
        stateError:
          type: string
        stateStartedAt:
          type: string
          format: date-time
          nullable: true
        stateFinishedAt:
          type: string
          format: date-time
          nullable: true
        networkIds:
          type: array
          items:
            type: string
          nullable: true
        volumeIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    DockerEnvironment:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: '#/components/schemas/DockerContainer'
        images:
          type: array
          items:
            $ref: '#/components/schemas/DockerImage'
        networks:
          type: array
          items:
            $ref: '#/components/schemas/DockerNetwork'
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/DockerVolume'
      additionalProperties: false
    DockerImage:
      type: object
      properties:
        imageId:
          type: string
        tag:
          type: string
        createdAt:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
      additionalProperties: false
    DockerNetwork:
      type: object
      properties:
        networkId:
          type: string
        name:
          type: string
        containerIds:
          type: array
          items:
            type: string
      additionalProperties: false
    DockerVolume:
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
      additionalProperties: false
    GrafanaConfigurationDto:
      type: object
      properties:
        created:
          type: boolean
        host:
          type: string
        useHttps:
          type: boolean
      additionalProperties: false
    KafkaClusterResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        virtualNetworks:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkSimpleDto'
        publicProxyConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/PublicProxyConfigurationDto'
      additionalProperties: false
    KafkaPartitionDto:
      type: object
      properties:
        topic:
          type: string
        partition:
          type: integer
          format: int32
        leader:
          type: integer
          format: int32
        replicas:
          type: array
          items:
            type: integer
            format: int32
        isr:
          type: array
          items:
            type: integer
            format: int32
        elr:
          type: string
        lastKnownElr:
          type: string
      additionalProperties: false
    KafkaTopicDto:
      type: object
      properties:
        name:
          type: string
        topicId:
          type: string
        partitionCount:
          type: integer
          format: int32
        replicationFactor:
          type: integer
          format: int32
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/KafkaPartitionDto'
      additionalProperties: false
    LoggedInUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        token:
          type: string
      additionalProperties: false
    ModifyWebApplicationConfigItemCommand:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      additionalProperties: false
    PostgresDatabaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        databaseName:
          type: string
        adminUsername:
          type: string
        serverName:
          type: string
        serverId:
          type: string
      additionalProperties: false
    PostgresDatabaseResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostgresDatabaseResourceDto'
      additionalProperties: false
    PostgresDatabaseSimpleResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        databaseName:
          type: string
        adminUsername:
          type: string
      additionalProperties: false
    PostgresQueryResultDto:
      type: object
      properties:
        csvResponse:
          type: array
          items:
            type: array
            items:
              type: string
      additionalProperties: false
    PostgresServerResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        virtualNetworks:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkSimpleDto'
        publicProxyConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/PublicProxyConfigurationDto'
        postgresDatabaseResources:
          type: array
          items:
            $ref: '#/components/schemas/PostgresDatabaseSimpleResourceDto'
      additionalProperties: false
    PostgresServerResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostgresServerResourceDto'
      additionalProperties: false
    PredefinedLokiQuery:
      enum:
        - ContainerLog
      type: string
    PredefinedPrometheusQuery:
      enum:
        - HttpRequestsCount
        - PostgresProcessesCount
        - PostgresEntriesInserted
        - PostgresEntriesReturned
        - GeneralCPULoad
        - GeneralMemoryUsage
      type: string
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    ProduceKafkaTopicMessageCommand:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      additionalProperties: false
    PrometheusDataDto:
      type: object
      properties:
        resultType:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/PrometheusResultItemDto'
      additionalProperties: false
    PrometheusResultDto:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/PrometheusDataDto'
      additionalProperties: false
    PrometheusResultItemDto:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        stream:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            type: array
            items: { }
      additionalProperties: false
    PublicAccessConfigurationDto:
      type: object
      properties:
        created:
          type: boolean
        host:
          type: string
      additionalProperties: false
    PublicProxyConfigurationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        useHttps:
          type: boolean
        domain:
          type: string
        port:
          type: integer
          format: int32
      additionalProperties: false
    QueryLokiQuery:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/PredefinedLokiQuery'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        step:
          type: string
          nullable: true
        timeout:
          type: string
          nullable: true
        limit:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    QueryPrometheusQuery:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/PredefinedPrometheusQuery'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        step:
          type: string
          nullable: true
        timeout:
          type: string
          nullable: true
        limit:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    ResourceGroupDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resources:
          type: array
          items:
            $ref: '#/components/schemas/BaseResourceDto'
      additionalProperties: false
    ResourceGroupSimpleDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      additionalProperties: false
    ResourceGroupSimpleDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGroupSimpleDto'
      additionalProperties: false
    ResourceGroupedBaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
      additionalProperties: false
    RunPostgresDatabaseQueryCommand:
      type: object
      properties:
        query:
          type: string
      additionalProperties: false
    UpdateWebApplicationDeploymentConfigurationCommand:
      type: object
      properties:
        buildCommand:
          type: string
        startupCommand:
          type: string
        runtimeType:
          $ref: '#/components/schemas/WebApplicationRuntimeType'
        port:
          type: integer
          format: int32
      additionalProperties: false
    UserLoginCommand:
      type: object
      properties:
        email:
          type: string
        normalizedEmail:
          type: string
          readOnly: true
        password:
          type: string
      additionalProperties: false
    UserRegistrationCommand:
      type: object
      properties:
        email:
          type: string
        normalizedEmail:
          type: string
          readOnly: true
        password:
          type: string
      additionalProperties: false
    UserUpdateCommand:
      type: object
      properties:
        newPassword:
          type: string
          nullable: true
      additionalProperties: false
    VirtualNetworkResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/BaseResourceDto'
      additionalProperties: false
    VirtualNetworkSimpleDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
      additionalProperties: false
    VirtualNetworkSimpleDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkSimpleDto'
      additionalProperties: false
    WebApplicationConfigurationEntryDto:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      additionalProperties: false
    WebApplicationResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        virtualNetworks:
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkSimpleDto'
        publicProxyConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/PublicProxyConfigurationDto'
        sourcePath:
          type: string
        sourceType:
          $ref: '#/components/schemas/WebApplicationSourceType'
        buildCommand:
          type: string
        startupCommand:
          type: string
        runtimeType:
          $ref: '#/components/schemas/WebApplicationRuntimeType'
        healthCheckUrl:
          type: string
        port:
          type: integer
          format: int32
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/WebApplicationConfigurationEntryDto'
          nullable: true
      additionalProperties: false
    WebApplicationResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebApplicationResourceDto'
      additionalProperties: false
    WebApplicationRuntimeType:
      enum:
        - Python
        - NodeJs
        - DotNet
      type: string
    WebApplicationSourceType:
      enum:
        - PublicGitClone
      type: string
  securitySchemes:
    Jwt Token:
      type: apiKey
      description: JWT Authorization token. Enter your token in the text input below.
      name: x-cloudy-token
      in: cookie
security:
  - Bearer: [ ]