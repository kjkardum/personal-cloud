openapi: 3.0.1
info:
  title: Kjkardum.CloudyBack.Api
  version: '1.0'
paths:
  /api/Authentication/Login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/resource/BaseResource:
    get:
      tags:
        - BaseResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/BaseResourceDtoPaginatedResponse'
  '/api/resource/BaseResource/{resourceId}/container':
    get:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ContainerDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ContainerDto'
  '/api/resource/BaseResource/{resourceId}/audit-log':
    get:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuditLogEntryPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntryPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntryPaginatedResponse'
  '/api/resource/BaseResource/{resourceId}/prometheus':
    post:
      tags:
        - BaseResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
          text/json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QueryPrometheusQuery'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PrometheusResultDto'
  /api/resource/PostgresServerResource:
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDtoPaginatedResponse'
    post:
      tags:
        - PostgresServerResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePostgresServerCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
  '/api/resource/PostgresServerResource/{serverId}':
    get:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresServerResourceDto'
    delete:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  '/api/resource/PostgresServerResource/{serverId}/database':
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabaseCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PostgresDatabaseResourceDto'
  '/api/resource/PostgresServerResource/{serverId}/containerAction':
    post:
      tags:
        - PostgresServerResource
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: actionId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/resource/ResourceGroup:
    post:
      tags:
        - ResourceGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateResourceGroupCommand'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDto'
    get:
      tags:
        - ResourceGroup
      parameters:
        - name: Page
          in: query
          schema:
            type: integer
            format: int32
        - name: PageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: FilterBy
          in: query
          schema:
            type: string
        - name: OrderBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupDtoPaginatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDtoPaginatedResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupDtoPaginatedResponse'
  '/api/resource/ResourceGroupedResource/{resourceId}':
    get:
      tags:
        - ResourceGroupedResource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ResourceGroupedBaseResourceDto'
  /health:
    get:
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /authenticated:
    get:
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/TenantManagement/createUser:
    post:
      tags:
        - TenantManagement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRegistrationCommand'
      responses:
        '200':
          description: OK
  '/api/TenantManagement/updateUser/{id}':
    put:
      tags:
        - TenantManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
      responses:
        '200':
          description: OK
  '/api/TenantManagement/deleteUser/{id}':
    delete:
      tags:
        - TenantManagement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
components:
  schemas:
    AuditLogEntry:
      required:
        - actionDisplayText
        - actionName
      type: object
      properties:
        id:
          type: string
          format: uuid
        actionName:
          type: string
        actionDisplayText:
          type: string
        actionMetadata:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        resourceId:
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/BaseResource'
      additionalProperties: false
    AuditLogEntryPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
      additionalProperties: false
    BaseResource:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        auditLogEntries:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
      additionalProperties: false
    BaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
      additionalProperties: false
    BaseResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/BaseResourceDto'
      additionalProperties: false
    ContainerDto:
      type: object
      properties:
        stateRunning:
          type: boolean
        statePaused:
          type: boolean
        stateRestarting:
          type: boolean
        stateError:
          type: string
        stateStartedAt:
          type: string
          format: date-time
        stateFinishedAt:
          type: string
          format: date-time
      additionalProperties: false
    CreatePostgresDatabaseCommand:
      required:
        - adminPassword
        - adminUsername
        - databaseName
      type: object
      properties:
        databaseName:
          type: string
        adminUsername:
          type: string
        adminPassword:
          type: string
      additionalProperties: false
    CreatePostgresServerCommand:
      required:
        - resourceGroupId
        - serverName
      type: object
      properties:
        resourceGroupId:
          type: string
          format: uuid
        serverName:
          type: string
        serverPort:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    CreateResourceGroupCommand:
      required:
        - name
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
    LoggedInUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        token:
          type: string
      additionalProperties: false
    PostgresDatabaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        databaseName:
          type: string
        adminUsername:
          type: string
      additionalProperties: false
    PostgresServerResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
        postgresDatabaseResources:
          type: array
          items:
            $ref: '#/components/schemas/PostgresDatabaseResourceDto'
      additionalProperties: false
    PostgresServerResourceDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostgresServerResourceDto'
      additionalProperties: false
    PredefinedPrometheusQuery:
      enum:
        - PostgresProcessesCount
      type: string
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    PrometheusDataDto:
      type: object
      properties:
        resultType:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/PrometheusResultItemDto'
      additionalProperties: false
    PrometheusResultDto:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/PrometheusDataDto'
      additionalProperties: false
    PrometheusResultItemDto:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            type: array
            items: { }
      additionalProperties: false
    QueryPrometheusQuery:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/PredefinedPrometheusQuery'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        step:
          type: string
          nullable: true
        timeout:
          type: string
          nullable: true
        limit:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    ResourceGroupDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      additionalProperties: false
    ResourceGroupDtoPaginatedResponse:
      required:
        - data
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGroupDto'
      additionalProperties: false
    ResourceGroupedBaseResourceDto:
      required:
        - id
        - name
        - resourceType
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceType:
          type: string
        resourceGroupId:
          type: string
          format: uuid
        resourceGroupName:
          type: string
      additionalProperties: false
    UserLoginCommand:
      type: object
      properties:
        email:
          type: string
        normalizedEmail:
          type: string
          readOnly: true
        password:
          type: string
      additionalProperties: false
    UserRegistrationCommand:
      type: object
      properties:
        email:
          type: string
        normalizedEmail:
          type: string
          readOnly: true
        password:
          type: string
      additionalProperties: false
    UserUpdateCommand:
      type: object
      properties:
        newPassword:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization token using the Bearer scheme. <br>\nEnter 'Bearer' [space] and then your token in the text input below. <br>\nExample: 'Bearer 12345abcdef'"
      name: Authorization
      in: header
security:
  - Bearer: [ ]